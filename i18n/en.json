{
  "特性": "Features",
  "实时渲染生成": "Real-time rendering and generation",
  "支持多个文档同时渲染": "Support rendering multiple documents simultaneously",
  "原理": "Principle",
  "该库主要由两部分构成": "The library is mainly composed of two parts",
  "命令行工具": "Command Line Tools",
  "函数API": "Function API",
  "一款支持通过 JSX 来编写 Markdown 的工具": "A tool that supports writing Markdown through JSX",
  "安装": "Install",
  "或者": "or",
  "​创建JSX文件": "Create JSX file",
  "在根目录下创建一个名为{0}的目录，并在该目录下创建{1}文件": "Create a directory named {0} under the root directory, and create {1} file under this directory",
  "其他相关文件": "Other relevant files",
  "假如{0}的内容如下：": "Suppose the content of {0} is as follows:",
  "初始化命令行配置文件": "Initialize command line configuration file",
  "在命令行终端输入如下命令，": "Enter the following command at the command line terminal, ",
  "命令列表": "Command List",
  "更多命令": "More Commands",
  "然后会在当前目录下生成一个{0}的文件": "Then a {0} file will be generated in the current directory",
  "然后你的文件目录是这样的": "Then your file directory is like this",
  "调整{0}配置": "Adjust {0} configuration",
  "命令行": "Command Line",
  "说明": "description",
  "默认的配置如下：": "The default configuration is as follows:",
  "执行生成命令": "Execute run command",
  "用法": "Usage",
  "愿景": "Vision",
  "为了让通过{0}来编写{1}成为件轻松且愉快的事{2}": "To make it easy and pleasant to write {1} through {0} {2}",
  "基础组件": "Basic components",
  "所以{0}和{1}这两者搭配使用效果更佳": "So {0} and {1} are better used together",
  "类型": "Type",
  "名称": "Name",
  "是否必设": "Required",
  "默认值": "Default",
  "是": "Yes",
  "数据源相关配置": "Datasource related configuration",
  "基础配置": "Basic Configuration",
  "文档入口文件（绝对路径）": "Document entry file (absolute path)",
  "否": "No",
  "Source": "Source",
  "{0}配置": "{0} configuration",
  "命令": "Command",
  "简写": "Abbreviation",
  "初始化配置文件": "Initialize Profile",
  "执行如下命令": "Execute the following command",
  "显示效果如下": "The display effect is as follows",
  "生成 Markdown 文件的路径（绝对路径）": "Path to generate Markdown file (absolute path)",
  "入口文件接收到的 props 属性": "Props attribute received by the entry file",
  "读取配置生成 Markdown 文件": "Read configuration to generate Markdown file",
  "参数名": "Parameter name",
  "参数值": "Parameter value",
  "适用命令": "Applicable command",
  "指定是否启用文件监听，该配置默认开启，启用后相关文件变化会重新生成 Markdown 文件": "Specifies whether to enable file monitoring. This configuration is enabled by default. After enabling, the relevant file changes will regenerate the Markdown file",
  "命令参数": "Command Parameters",
  "支持原生 HTML": "Support Native HTML",
  "提供对标 Markdown 语法的基础组件及 render 函数": "Provides basic components and render functions of benchmarking Markdown syntax",
  "用于替代 Markdown 语法的基础组件": "Basic components for replacing Markdown syntax",
  "render 函数": "Render function",
  "渲染 JSX 编写的内容，返回生成的字符内容": "Render the content written by JSX and return the generated character content",
  "解析配置文件、执行 render 逻辑，最后生成 Markdown 文件": "Parse configuration files, execute render logic, and finally generate Markdown files",
  "目录": "Table of Contents",
  "支持生成目录": "Support generate table of contents",
  "支持异步渲染": "Support asynchronous rendering",
  "根据需求自行调整配置文件中的配置项，配置项的{0}": "Adjust the configuration items in the configuration file according to the requirements {0}",
  "假如未调整上面的默认配置，命令执行成功的话，会在根目录下生成对应的 Markdown 文件，最后生成的 Markdown 文本内容如下": "If the above default configuration is not adjusted and the command is executed successfully, the corresponding Markdown file will be generated in the root directory. The final generated Markdown text is as follows",
  "并且{0}内容发生调整，保存后，对应的 Markdown 文件也会实时同步变化": "And {0} content is adjusted. After saving, the corresponding Markdown file will also change synchronously in real time",
  "代码": "Code",
  "生成 Markdown 字符内容": "Generate Markdown character content",
  "这里为了避免与 Markdown 语法冲突，多添加了此描述": "This description is added here to avoid conflicts with Markdown syntax",
  "渲染内容": "Render Content",
  "朋友": "friend",
  "基础的": "Basic",
  "嵌套的": "Nested",
  "异步渲染包装器": "Asynchronous Rendering Wrapper",
  "用于支持异步渲染": "Used to support asynchronous rendering",
  "组件列表": "Component List",
  "属性说明": "Attribute Description",
  "异步加载的数据": "Data loaded asynchronously",
  "示例代码": "Sample Code",
  "普通引用": "General reference",
  "嵌套引用": "Nested Reference",
  "引用块": "Block Quote",
  "层级，适用于多层嵌套的场景": "Hierarchy, suitable for multi nested scenes",
  "行内代码": "Inline code",
  "代码块": "Code block",
  "代码内容": "Code content",
  "代码类型": "Code Type",
  "斜体": "Italic",
  "粗体": "Bold",
  "倾斜加粗": "Oblique Bold",
  "删除线": "Strikethrough",
  "字体": "Font",
  "生成对应 Markdown 语法的标记符": "Generate markers corresponding to Markdown syntax",
  "跳过生成目录": "Skip generate directory",
  "标题": "Heading",
  "对应 HTML 中 h1-h6 标签，使用方式也类似": "The corresponding h1-h6 tags in HTML are used in a similar way",
  "控制当前标题是否跳过生成目录": "Controls whether the current title skips generate directories",
  "图片标题": "Image Title",
  "图片说明": "The description of image",
  "图片": "Image",
  "图片链接地址": "Image link address",
  "图片加载异常显示的文案": "Image loading abnormally displayed text",
  "鼠标悬浮显示的提示信息": "Prompt information displayed by mouse hovering",
  "组件": "Component",
  "布局": "Layout",
  "这里提供布局相关的组件": "Layout related components are provided here",
  "链接标题": "Link Title",
  "链接": "Link",
  "链接地址": "Link Address",
  "列表": "List",
  "无序列表": "Unordered list",
  "列表项1": "List Item 1",
  "列表项2": "List Item 2",
  "列表项3": "List Item 3",
  "有序列表": "Ordered list",
  "嵌套列表": "Nested list ",
  "开发": "development",
  "前端": "front end",
  "后端": "back-end",
  "测试": "test",
  "单元测试": "unit testing ",
  "E2E测试": "E2E test",
  "语义型": "Semantic Type",
  "简易型": "Simple Type",
  "嵌套层级": "Nesting Level",
  "适用于 `OderList`、`UnorderedList`": "Applicable to `OderList` and `UnorderedList`",
  "列表项配置": "List Item Configuration",
  "适用于 `List`": "For `List`",
  "类型说明": "Type Description",
  "正是由于如下复杂的嵌套类型，使得 `List` 可以通过简洁的语法拼凑出复杂的嵌套列表": "Because of the following complex nested types, `List` can piece together complex nested lists through simple syntax",
  "列表类型": "List Type",
  "{0}标识有序列表": "{0} identifies a sequence list",
  "{0}标识无序列表": "{0} identifies an unordered list",
  "列表项内容": "List item content",
  "靠左标题": "Left Title",
  "居中标题": "Centered Title",
  "靠右标题": "Right Title",
  "表格": "Table",
  "列头配置": "Column Header Configuration",
  "表体数据内容": "Table Body Data Content",
  "表格标题": "Table Title",
  "当前列字段名": "Current column field name",
  "当前列文本对齐方式": "Current column text alignment",
  "目录显示文案": "Directory display copy",
  "是否默认展开目录": "Expand directory by default",
  "目录缩进": "Table of Contents Indent",
  "目录的层次结构是基于缩进来实现的": "The directory hierarchy is implemented based on indentation",
  "任务列表": "Task list",
  "基础": "Basics",
  "嵌套": "Nesting",
  "任务清单": "Task list",
  "任务项配置": "Task item configuration",
  "支持多层级任务，内部会根据子任务的状态计算出父任务的状态": "Support multi-level tasks. The status of the parent task will be calculated internally according to the status of the sub task",
  "任务状态": "Task Status",
  "未完成": "hang in the air",
  "已完成": "Completed",
  "任务项，任务状态默认为已完成": "Task item, task status is completed by default",
  "属性名": "Attribute Name",
  "是否必须": "Whether it is necessary",
  "如果配合当前的库的命令行工具使用，根节点的渲染无需使用该函数，只需要将根节点默认导出就可以": "If used in conjunction with the command line tools of the current library, the root node does not need to use this function for rendering, but only needs to export the root node by default",
  "函数名": "Function Name",
  "渲染 JSX 元素，返回生成的 Markdown 字符内容": "Render JSX elements and return the generated Markdown character content",
  "异步渲染 JSX 元素，返回生成的 Markdown 字符内容": "Asynchronous rendering of JSX elements, returning the generated Markdown character content",
  "当前函数只能用于渲染根节点，需要异步渲染的内容需要搭配 AsyncWrapper 来使用": "The current function can only be used to render the root node. The content to be rendered asynchronously needs to be used with AsyncWrapper",
  "输出：{0}": "Output: {0}",
  "API": "API",
  "帮助文档": "Help Document",
  "快速上手": "Quick Start",
  "文本内容": "text content",
  "函数列表": "Function List",
  "欢迎使用": "welcome to use",
  "更新日志": "Changelog",
  "实现基础命令行工具": "Implement basic command line tools",
  "实现基础函数API和基础组件": "Implement the basic function API and basic components",
  "该属性针对{0}无效": "This property is not valid for {0}",
  "提供渲染生成 Markdown 语法内容的基础组件": "Provides the basic component for rendering and generating Markdown syntax content",
  "新增命令参数{0},可用于指定{1}的编译方式，从而决定是否需要手动引入{2}": "New command parameter {0} has been added for specifying the compilation method of {1}, thus determining whether {2} needs to be manually imported",
  "可用于指定{0}的编译方式，从而决定是否需要手动引入{1}": "Can be used to specify the compilation method for {0} to determine whether it is necessary to manually import {1}",
  "{0}会编译为{1}需要引入{2}": "{0} will compile to {1}, requiring the introduction of {2}",
  "内部默认会从{0}中引入{1}和{2}，不需要引入{3}": "Internal default will import {1} and {2} from {0}, and there is no need to import {3}",
  "更新{0}中示例效果图": "Update the example effect screenshots in {0}",
  "修复以下场景生成目录在{0}中导航不正确": "Fix incorrect navigation of the generated directory in {0} for the following scenarios",
  "存在{0}包裹的内容": "The content of {0} package exists",
  "添加用于生成锚点的工具方法：{0}": "Add a tool method for generating anchors: {0}",
  "基于标题内容获取生成的锚点": "Retrieve generated anchor points based on title content",
  "存在{0}的内容": "Content with {0} exists",
  "类似于{0}中的{1}属性，可用于生成独立的锚点": "Similar to the {1} attribute in {0}, it can be used to generate independent anchors",
  "如果设置该属性，最终生成的字符将不再是{0}语法，而是{1}语法": "If this property is set, the final generated characters will no longer be {0} syntax, but {1} syntax",
  "对应{0}语法中的{1}": "Corresponds to {1} in {0} syntax",
  "文档": "Docs",
  "优化目录的生成，支持通过识别{0}和{1}中的{2}属性来生成锚点链接": "Optimize table of contents generation, support anchor link generation by identifying {2} attributes in {0} and {1}",
  "{0}相关组件{1}添加{2}属性": "{0} related component {1} added {2} attribute",
  "更新{0}文档格式，将独立区分{1}、{2}、{3}更新的内容": "Update the {0} document format to independently distinguish the updated content of {1}, {2}, and {3}",
  "修复{0}和{1}文档中相同标题生成的目录锚点跳转异常": "Fix directory anchor jump exception generated by the same title in {0} and {1} documents",
  "存在{0}包裹非英文内容": "There are {0} packages with non English content"
}